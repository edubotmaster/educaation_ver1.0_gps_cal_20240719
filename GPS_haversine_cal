  import React, { useState, useEffect } from 'react';

  const EARTH_RADIUS = 6371; // 지구의 반지름 (km)

  const toRadians = (degrees: number) => degrees * (Math.PI / 180);
  const toDegrees = (radians: number) => radians * (180 / Math.PI);

  const getCoordinates = async (address: string) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
      const data = await response.json();
      if (data && data.length > 0) {
        return { lat: parseFloat(data[0].lat), lng: parseFloat(data[0].lon) };
      }
      throw new Error('주소를 찾을 수 없습니다.');
    } catch (error) {
      console.error('Geocoding error:', error);
      return null;
    }
  };

  // 가상의 위성 데이터
  const mockSatellites = [
    { satid: 25544, satname: "ISS (ZARYA)", satlat: 51.6414, satlng: -0.2077, satalt: 408 },
    { satid: 20580, satname: "HUBBLE", satlat: 28.4623, satlng: -80.5792, satalt: 540 },
    { satid: 33591, satname: "NOAA 19", satlat: 0.9643, satlng: -109.2035, satalt: 870 },
  ];

  const getVisibleSatellites = async () => {
    return mockSatellites;
  };

  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {
    const phi1 = toRadians(lat1);
    const phi2 = toRadians(lat2);
    const deltaPhi = toRadians(lat2 - lat1);
    const deltaLambda = toRadians(lon2 - lon1);

    const a = Math.sin(deltaPhi/2) * Math.sin(deltaPhi/2) +
              Math.cos(phi1) * Math.cos(phi2) *
              Math.sin(deltaLambda/2) * Math.sin(deltaLambda/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    return EARTH_RADIUS * c;
  };

  const calculateBearing = (lat1: number, lon1: number, lat2: number, lon2: number) => {
    const phi1 = toRadians(lat1);
    const phi2 = toRadians(lat2);
    const deltaLambda = toRadians(lon2 - lon1);

    const y = Math.sin(deltaLambda) * Math.cos(phi2);
    const x = Math.cos(phi1) * Math.sin(phi2) -
              Math.sin(phi1) * Math.cos(phi2) * Math.cos(deltaLambda);
    const theta = Math.atan2(y, x);

    return (toDegrees(theta) + 360) % 360;
  };

  const calculateElevation = (distance: number, satelliteAltitude: number) => {
    return toDegrees(Math.atan2(satelliteAltitude, distance));
  };

  const SatelliteCalculator = () => {
    const [groundAddress, setGroundAddress] = useState('');
    const [selectedSatellite, setSelectedSatellite] = useState<any>(null);
    const [visibleSatellites, setVisibleSatellites] = useState<any[]>([]);
    const [result, setResult] = useState<any>(null);
    const [calculationSteps, setCalculationSteps] = useState<string[]>([]);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
      if (selectedSatellite) {
        handleCalculate();
      }
    }, [selectedSatellite]);

    const handleCalculate = async () => {
      setError(null);
      const steps: string[] = [];
      steps.push(`1. 지상 주소: ${groundAddress}`);

      const groundCoords = await getCoordinates(groundAddress);
      if (!groundCoords) {
        setError('주소를 찾을 수 없습니다. 다시 확인해주세요.');
        return;
      }

      steps.push(`2. 지상 좌표 변환:
        - 입력 주소를 위경도 좌표로 변환합니다.
        - 위도(φ₁): ${groundCoords.lat.toFixed(4)}°
        - 경도(λ₁): ${groundCoords.lng.toFixed(4)}°
        
        * 위도는 적도면으로부터의 각도를 나타내며, -90°에서 90° 사이의 값을 가집니다.
        * 경도는 본초 자오선으로부터의 각도를 나타내며, -180°에서 180° 사이의 값을 가집니다.`);

      const satellites = await getVisibleSatellites();
      setVisibleSatellites(satellites);

      if (!selectedSatellite) {
        setCalculationSteps(steps);
        return;
      }

      steps.push(`3. 선택된 위성: ${selectedSatellite.satname} (NORAD ID: ${selectedSatellite.satid})
        - 위성 위도(φ₂): ${selectedSatellite.satlat.toFixed(4)}°
        - 위성 경도(λ₂): ${selectedSatellite.satlng.toFixed(4)}°
        - 위성 고도(h): ${selectedSatellite.satalt.toFixed(2)} km`);

      const phi1 = toRadians(groundCoords.lat);
      const phi2 = toRadians(selectedSatellite.satlat);
      const deltaPhi = toRadians(selectedSatellite.satlat - groundCoords.lat);
      const deltaLambda = toRadians(selectedSatellite.satlng - groundCoords.lng);

      steps.push(`4. 라디안 변환:
        φ₁ = ${phi1.toFixed(6)} rad
        φ₂ = ${phi2.toFixed(6)} rad
        Δφ = ${deltaPhi.toFixed(6)} rad
        Δλ = ${deltaLambda.toFixed(6)} rad`);

      const a = Math.sin(deltaPhi/2) * Math.sin(deltaPhi/2) +
                Math.cos(phi1) * Math.cos(phi2) *
                Math.sin(deltaLambda/2) * Math.sin(deltaLambda/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      const distance = EARTH_RADIUS * c;

      steps.push(`5. 대권 거리 계산 (Haversine 공식):
        a = sin²(Δφ/2) + cos(φ₁)cos(φ₂)sin²(Δλ/2)
          = ${a.toFixed(6)}
        c = 2 * atan2(√a, √(1-a))
          = ${c.toFixed(6)}
        distance = R * c = ${EARTH_RADIUS} * ${c.toFixed(6)} = ${distance.toFixed(2)} km`);

      const y = Math.sin(deltaLambda) * Math.cos(phi2);
      const x = Math.cos(phi1) * Math.sin(phi2) - Math.sin(phi1) * Math.cos(phi2) * Math.cos(deltaLambda);
      const theta = Math.atan2(y, x);
      const azimuth = (toDegrees(theta) + 360) % 360;

      steps.push(`6. 방위각 계산:
        y = sin(Δλ)cos(φ₂) = ${y.toFixed(6)}
        x = cos(φ₁)sin(φ₂) - sin(φ₁)cos(φ₂)cos(Δλ) = ${x.toFixed(6)}
        θ = atan2(y, x) = ${theta.toFixed(6)} rad
        azimuth = (θ * 180/π + 360) % 360 = ${azimuth.toFixed(2)}°`);

      const elevation = calculateElevation(distance, selectedSatellite.satalt);
      steps.push(`7. 고도각 계산:
        elevation = atan2(h, d) * 180/π
                  = atan2(${selectedSatellite.satalt.toFixed(2)}, ${distance.toFixed(2)}) * 180/π
                  = ${elevation.toFixed(2)}°`);

      const slantRange = Math.sqrt(Math.pow(distance, 2) + Math.pow(selectedSatellite.satalt, 2));
      steps.push(`8. 실제 거리 (Slant Range) 계산:
        slantRange = √(d² + h²)
                   = √(${distance.toFixed(2)}² + ${selectedSatellite.satalt.toFixed(2)}²)
                   = ${slantRange.toFixed(2)} km`);

      setResult({
        distance: parseFloat(slantRange.toFixed(2)),
        azimuth: parseFloat(azimuth.toFixed(2)),
        elevation: parseFloat(elevation.toFixed(2))
      });

      setCalculationSteps(steps);
    };

    return (
      <div className="p-4 max-w-3xl mx-auto bg-white rounded-xl shadow-md">
        <h2 className="text-2xl font-bold mb-4">상세 교육용 인공위성 거리 및 각도 계산기</h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">지상 주소:</label>
            <input
              type="text"
              value={groundAddress}
              onChange={(e) => setGroundAddress(e.target.value)}
              placeholder="예: 서울특별시 중구 세종대로 110"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
            />
          </div>
          <button
            onClick={handleCalculate}
            className="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            계산하기
          </button>
        </div>
        {error && (
          <div className="mt-4 p-2 bg-red-100 border border-red-400 text-red-700 rounded">
            {error}
          </div>
        )}
        {visibleSatellites.length > 0 && (
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700">위성 선택:</label>
            <select
              value={selectedSatellite ? selectedSatellite.satid : ''}
              onChange={(e) => setSelectedSatellite(visibleSatellites.find(sat => sat.satid === parseInt(e.target.value)))}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
            >
              <option value="">위성을 선택하세요</option>
              {visibleSatellites.map(sat => (
                <option key={sat.satid} value={sat.satid}>{sat.satname}</option>
              ))}
            </select>
          </div>
        )}
        {calculationSteps.length > 0 && (
          <div className="mt-4 p-4 bg-gray-100 rounded-md">
            <h3 className="text-lg font-semibold mb-2">상세 계산 과정:</h3>
            {calculationSteps.map((step, index) => (
              <div key={index} className="mb-4">
                <pre className="whitespace-pre-wrap text-sm">{step}</pre>
              </div>
            ))}
          </div>
        )}
        {result && (
          <div className="mt-4 p-4 bg-gray-100 rounded-md">
            <h3 className="text-lg font-semibold mb-2">최종 결과:</h3>
            <p>실제 거리 (Slant Range): {result.distance} km</p>
            <p>방위각 (Azimuth): {result.azimuth}°</p>
            <p>고도각 (Elevation): {result.elevation}°</p>
          </div>
        )}
      </div>
    );
  };

  export default SatelliteCalculator;
